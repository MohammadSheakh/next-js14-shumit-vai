# Allow Images from another hostName  -----------------------------------

const nextConfig = {
  images:{
    remotePatterns : [
      { 
        protocol : "https",
        hostname : "placehold.jp",
      }
    ]
  }
}

#   -----------------------------------

  data fetching server component e kora uchit .. 
  useState, useEffect Client component e use korte hoy .. jehetu server e kono state nai .. 

  example of a submit button ->

  "use client"
  import {useFormStatus} from "react-dom" // eta next js eo kaj kore .. 
  export default function SubmitBtn(){
    const {pending} = useFormStatus(); // is there any server action running here ..

    return (

      <button className="disabled:bg-zinc-300" disabled={pending}></button>
    )



  }



#  Server Action -----------------------------------
 
 

 const addPost = async (formData: FormData) => {
  "use server" ////////////////////////////////// it only runs on server ... 
  await orm.tableName.create({
    data : {
      title  :formData.get("title") as string,
      ......,
    }
  });

  revalidatePath("/post"); ///////// data post korar pore .. page refresh kora lagbe na amader .. automatic
  //////////// cache revalidate hoye jabe .. component re-render hobe .. 
 }

 <form action={addPost}></form>


#  Dynamic Rendering  -----------------------------------

  kono static component ke jodi dynamically render korte hoy .. 

  -> export const dynamic  = "force-dynamic"

  tarpore npm run build dile amra lamda icon dekhte parbo .. shei page er jonno .. 
  jetar mane hoccche server renderd.. 

  eta full component er upore apply hoy .. amra each fetch call er time eo specific vabe bolte pari .. 


  const result = await fetch(
    "https://jsonplaceholder.typicode.com/posts?_limit=10",
    {
      next: {
        revalidate: 10, // 10 sec por por checking hobe .. new data fetch korbe ..
      },
      // cache: "force-cache", //by default .. cache korbe ..
      // cache: "no-store", // cache korbe na .. shob shomoy updated data dekhabe ..
    }
  );



# Middleware  -----------------------------------

 .. we can run it .. before request hits the server .. 
 .. purpose : authentication ..  .. try next auth or other third party .. 

 create middleware.ts under directly app folder .. 

export function middleware(request: NextRequest){
  const isAuthenticated = false;

  if(!isAuthenticated){
    return NextResponse.redirect("/login");
  }

  return NextResponse.next();
}

export const config = {
  matcher : ["/dashboad", "/account"],
};

# Environment Variable  -----------------------------------

// For public Variable : .env file .. which is public 
// for secret variable : .env.local file .. which is ignored in .gitignore
